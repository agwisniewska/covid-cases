{"version":3,"sources":["context/types.ts","context/cases-summary.tsx","components/covid-app.tsx","App.tsx","reportWebVitals.ts","index.tsx","context/search-context.tsx","components/shared/button-to-navigate.tsx","services/urls.tsx","features/index.ts","features/covid-cases-table/utils.ts","components/table/utils/pagination/types.ts","components/table/utils/pagination/button.tsx","hooks/useApi.ts","components/table/utils/pagination/pagination.tsx","components/search/search.tsx","components/table/utils/filters/default-column-filter.tsx","components/table/table.tsx","components/table/table-container.tsx","features/covid-cases-table/covid-cases-table.tsx","features/covid-cases-table/columns.tsx","components/chart/chart.tsx","features/covid-cases-chart/covid-cases-chart.tsx","features/covid-cases-chart/datasets.ts"],"names":["STATUS","dataFetchReducer","state","action","type","INIT","isLoading","isError","SUCCESS","data","payload","FAILURE","Error","CasesStateContext","createContext","undefined","CasesDispatchContext","CasesProvider","children","useReducer","dispatch","useEffect","a","axios","get","URLS","SUMMARY","headers","result","fetchData","Provider","value","useCasesState","context","useContext","CovidApp","exact","path","component","CovidCasesTable","CovidCasesChart","App","basename","process","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","console","log","SearchStateContext","SearchDispatchContext","SearchProvider","useState","searchPhrase","setSearchPhrase","useSearchState","useSearchDispatch","React","ButtonToNavigate","title","history","useHistory","onClick","push","DIRECTION","getTotalCount","info","key","rows","reduce","sum","row","values","PaginationButton","disabled","direction","LEFT","Pagination","previousPage","nextPage","pageOptions","canNextPage","canPreviousPage","pageIndex","RIGHT","length","renderInputComponent","inputProps","onChange","event","newValue","target","method","aria-label","aria-describedby","renderSuggestionsContainer","containerProps","query","Search","initialApi","initialData","url","setUrl","useDataApi","countries","setCountries","suggestions","setSuggestions","innerValue","setInnerValue","inner","map","country","Country","placeholder","preventDefault","onSuggestionsFetchRequested","reason","inputValue","trim","toLowerCase","inputLength","filter","lang","slice","getSuggestions","getSuggestionValue","suggestion","renderSuggestion","onSuggestionSelected","suggestionValue","onSuggestionsClearRequested","DefaultColumnFilter","setFilter","column","Table","columns","defaultColumn","useMemo","Header","Filter","useTable","initialState","pageSize","useFilters","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","footerGroups","page","paginationProps","headerGroup","getHeaderGroupProps","scope","getHeaderProps","canFilter","i","getRowProps","cells","cell","getCellProps","group","getFooterGroupProps","getFooterProps","TableContainer","props","header","tableProps","memoColumns","accessor","Footer","total","filteredRows","Chart","width","height","options","maintainAspectRatio","responsive","datasets","labels","forEach","covidCase","label","backgroundColor"],"mappings":"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","file":"static/js/main.ece187d8.chunk.js","sourcesContent":["export enum STATUS {\n  INIT = 'INIT',\n  SUCCESS = 'SUCCESS',\n  FAILURE = 'FAILURE'\n}\n\n//  TODO: Verify that interface\nexport interface Action {\n  type: STATUS;\n  payload?: object;\n}","import React, {createContext, useContext, useReducer, useEffect} from 'react';\nimport axios from 'axios';\nimport {Action, STATUS} from '../context';\nimport {URLS} from '../services';\nimport { CountryData } from '../features';\n\ntype Dispatch = (state: any) => void\ntype CasesProviderProps = {children: React.ReactNode};\n\n//  TODO: Change any to types!\nconst dataFetchReducer = (state: any, action: Action) => {\n  switch (action.type) {\n    case STATUS.INIT:\n      return {\n        ...state,\n        isLoading: true,\n        isError: false\n      };\n    case STATUS.SUCCESS:\n      return {\n        ...state,\n        isLoading: false,\n        isError: false,\n        data: action.payload,\n      };\n    case STATUS.FAILURE:\n      return {\n        ...state,\n        isLoading: false,\n        isError: true,\n      };\n    default:\n\n    //  add typescript never function !\n      throw new Error();\n  }\n};\n\n\n//  TODO: Type data properly\ninterface State {\n  isLoading: boolean;\n  isError: boolean;\n  data: any;\n}\n\nconst CasesStateContext = createContext<State | undefined>(undefined);\nconst CasesDispatchContext = createContext<Dispatch | undefined>(undefined);\n\nconst CasesProvider = ({children}: CasesProviderProps) => {\n  const [state, dispatch] = useReducer(dataFetchReducer, {\n    isLoading: false,\n    isError: false,\n    data: null,\n  });\n\n  useEffect(() => {\n    let didCancel = false;\n\n    const fetchData = async () => {\n      dispatch({ type: STATUS.INIT });\n\n      try {\n\n        const result = await axios.get(URLS.SUMMARY, {\n          headers: {\n            'Authorization': 'X-Access-Token5cf9dfd5-3449-485e-b5ae-70a60e997864'\n           }\n          }\n        );\n\n        if (!didCancel) {\n          dispatch({ type: STATUS.SUCCESS, payload: result.data });\n        }\n\n      } catch (error) {\n        if (!didCancel) {\n          dispatch({ type: STATUS.FAILURE });\n\n        }\n      }\n    };\n \n    fetchData();\n\n  }, []);\n\n\n  return (\n    <CasesStateContext.Provider value={state}>\n      <CasesDispatchContext.Provider value={dispatch}>\n        {children}\n      </CasesDispatchContext.Provider>\n    </CasesStateContext.Provider>\n  )\n}\n\nconst useCasesState = () => {\n  const context = useContext(CasesStateContext)\n  if (context == null) {\n    throw new Error('useCasesState must be used within a SearchProvider')\n  }\n  return context\n}\n\nconst useCasesDispatch = () => {\n  const context = useContext(CasesDispatchContext)\n  if (context == null) {\n    throw new Error('useCasesDispatch must be used within a SearchProvider')\n  }\n  return context\n}\n\n\nexport {useCasesDispatch, useCasesState, CasesProvider}","import React from 'react';\nimport {Switch, Route} from \"react-router-dom\";\nimport { CovidCasesChart, CovidCasesTable } from '../features';\n\nexport const CovidApp = () => {\n  return (\n    <Switch>\n      <Route exact path='/' component={CovidCasesTable}/>\n      <Route path='/table' component={CovidCasesTable} />\n      <Route path='/chart' component={CovidCasesChart}/>\n  </Switch>\n  )\n}\n","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport {CovidApp} from \"./components/covid-app\";\nimport { CasesProvider } from './context';\n\nexport const App = () =>  {\n  return (\n    <HashRouter basename={process.env.PUBLIC_URL}>\n      <div className=\"container\">\n        <CasesProvider>\n          <CovidApp /> \n        </CasesProvider>\n      </div>\n    </HashRouter>\n\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport {App} from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n","import React, {createContext, useState, useContext} from 'react';\n\ntype Dispatch = (searchPhrase: string) => void\ntype SearchProviderProps = {children: React.ReactNode}\n\nconst SearchStateContext = createContext<string | undefined>(undefined);\nconst SearchDispatchContext = createContext<Dispatch | undefined>(undefined);\n\nconst SearchProvider = ({children}: SearchProviderProps) => {\n\n  const [searchPhrase, setSearchPhrase] = useState('');\n\n  return (\n    <SearchStateContext.Provider value={searchPhrase}>\n      <SearchDispatchContext.Provider value={setSearchPhrase}>\n        {children}\n      </SearchDispatchContext.Provider>\n    </SearchStateContext.Provider>\n  )\n}\n\nconst useSearchState = () => {\n  const context = useContext(SearchStateContext)\n  if (context == null) {\n    throw new Error('useSearchState must be used within a SearchProvider')\n  }\n  return context\n}\n\nconst useSearchDispatch = () => {\n  const context = React.useContext(SearchDispatchContext)\n  if (context == null) {\n    throw new Error('useSearchDispatch must be used within a SearchProvider')\n  }\n  return context\n}\n\n\nexport {useSearchState, useSearchDispatch, SearchProvider}","import React from 'react';\nimport {useHistory} from 'react-router-dom';\n\ninterface ButtonToNavigate {\n  title: string;\n  path: string;\n}\n\nexport const ButtonToNavigate = ({ title, path }: ButtonToNavigate) => {\n  const history = useHistory();\n  \n  const onClick = () => {\n    history.push(path);\n  }\n\n  return (\n    <button\n      type=\"button\"\n      className=\"btn btn-info\"\n      onClick={onClick}>\n      {title}\n    </button>\n  );\n}\n","const BASE_URL = 'https://api.covid19api.com';\n\nexport const URLS = {\n  SUMMARY: `${BASE_URL}/summary`\n}","export * from \"./types\";\nexport * from './covid-cases-chart';\nexport * from './covid-cases-table';","import {TableInstance} from 'react-table';\n\nexport const getTotalCount = (info: TableInstance, key: string): number => {\n  return info.rows.reduce((sum, row) => row.values[key] + sum, 0);\n}","import {UsePaginationInstanceProps, UsePaginationState} from 'react-table';\n\nexport interface PaginationButtonProps {\n  disabled: boolean;\n  direction?: string;\n  onClick: () => void;\n}\n\nexport type PaginationProps = Pick<UsePaginationInstanceProps<{}>,\n'previousPage' |\n'nextPage' |\n'pageOptions' |\n'canPreviousPage' |\n'canNextPage'\n> & Pick<UsePaginationState<{}>,\n'pageIndex'\n> & {\n  //  TODO: Verify if custom props are needed!\n}\n\nexport enum DIRECTION {\n  LEFT = 'LEFT',\n  RIGHT = 'RIGHT',\n}","import React, {Fragment, FunctionComponent} from 'react';\nimport {PaginationButtonProps} from '../pagination';\nimport { DIRECTION } from './types';\n\nexport const PaginationButton: FunctionComponent<PaginationButtonProps> = ({disabled, direction, onClick, children}) => {\n  return (\n  <button type=\"button\" disabled={disabled} onClick={onClick}>\n      {!children && direction ===  DIRECTION.LEFT ? '<' : '>'}\n      {children && <Fragment>{children}</Fragment>}\n  </button>\n  )\n}","import {useState, useReducer, useEffect} from \"react\";\nimport axios from 'axios';\n\nenum STATUS {\n  INIT = 'INIT',\n  SUCCESS = 'SUCCESS',\n  FAILURE = 'FAILURE'\n}\n\n//  TODO: Verify that interface\ninterface Action {\n  type: STATUS;\n  payload?: object;\n}\n\n//  TODO: Change any to types!\nconst dataFetchReducer = (state: any, action: Action) => {\n  switch (action.type) {\n    case STATUS.INIT:\n      return {\n        ...state,\n        isLoading: true,\n        isError: false\n      };\n    case STATUS.SUCCESS:\n      return {\n        ...state,\n        isLoading: false,\n        isError: false,\n        data: action.payload,\n      };\n    case STATUS.FAILURE:\n      return {\n        ...state,\n        isLoading: false,\n        isError: true,\n      };\n    default:\n\n    //  add typescript never function !\n      throw new Error();\n  }\n};\n\nexport const useDataApi = (initialApi: string, initialData: unknown) => {\n  const [url, setUrl] = useState(initialApi);\n\n  const [state, dispatch] = useReducer(dataFetchReducer, {\n    isLoading: false,\n    isError: false,\n    data: initialData,\n  });\n\n  useEffect(() => {\n    let didCancel = false;\n\n    const fetchData = async () => {\n      dispatch({ type: STATUS.INIT });\n\n      try {\n\n        const result = await axios.get(url, {\n          headers: {\n            'Authorization': 'X-Access-Token5cf9dfd5-3449-485e-b5ae-70a60e997864'\n           }\n          }\n        );\n\n        if (!didCancel) {\n          dispatch({ type: STATUS.SUCCESS, payload: result.data });\n        }\n\n      } catch (error) {\n        if (!didCancel) {\n          dispatch({ type: STATUS.FAILURE });\n\n        }\n      }\n    };\n \n    fetchData();\n\n  }, [url]);\n \n  return [state, setUrl];\n}","import React, { FunctionComponent } from 'react';\nimport {PaginationProps} from '../pagination';\nimport { PaginationButton } from './button';\nimport { DIRECTION } from './types';\n\nexport const Pagination: FunctionComponent<PaginationProps> = ({\n  previousPage,\n  nextPage,\n  pageOptions,\n  canNextPage,\n  canPreviousPage,\n  pageIndex,\n}: PaginationProps) => {\n  return (\n    <div className=\"pagination\">\n      <PaginationButton onClick={previousPage} disabled={!canPreviousPage} direction={DIRECTION.LEFT}/>\n      <PaginationButton onClick={nextPage} disabled={!canNextPage} direction={DIRECTION.RIGHT} />\n       <span>\n         Page\n         <strong>\n           {pageIndex + 1} of {pageOptions.length}\n         </strong>{' '}\n       </span>\n    </div>\n  )\n}","import React, {FunctionComponent, useEffect, useState} from 'react';\nimport {useDataApi} from \"../../hooks/useApi\";\nimport Autosuggest, { SuggestionsFetchRequestedParams, OnSuggestionSelected , RenderSuggestion, GetSuggestionValue, OnSuggestionsClearRequested, RenderInputComponent, InputProps, ChangeEvent, RenderSuggestionsContainer, RenderSuggestionsContainerParams } from 'react-autosuggest';\nimport {useSearchDispatch} from '../../context/search-context';\nimport {URLS} from '../../services';\n\nconst renderInputComponent: RenderInputComponent<string> = (inputProps: InputProps<string>) => {\n  //  TODO: Verify how to change it easily (the problem here that onChange type in inputProps is different than onChange in standard HTMLInput)\n  const onChangeHandler = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    inputProps.onChange(event, { newValue: event.target.value, method: 'type' });\n  };\n\n  return (\n  <div className=\"input-group mb-3\">\n    <input {...inputProps} onChange={onChangeHandler} type=\"text\" className=\"form-control\" aria-label=\"Country\" aria-describedby=\"inputGroup-sizing-default\"/>\n  </div>\n  )\n};\n\nconst renderSuggestionsContainer: RenderSuggestionsContainer = ({ containerProps, children, query }: RenderSuggestionsContainerParams) => {\n  if (!children) {\n    return null;\n  }\n  return (<ul {...containerProps} className=\"list-group\" >\n         <li className=\"list-group-item\" > {children} </li>\n    </ul>);\n}\n\nexport const Search: FunctionComponent = () => {\n  const [{data}] = useDataApi(URLS.SUMMARY, []);\n  const [countries, setCountries] = useState([]);\n  const [suggestions, setSuggestions] = useState([]);\n  const [innerValue, setInnerValue] = useState('');\n  const dispatch = useSearchDispatch();\n\n  useEffect(() => {\n    if (data && data['Countries']) {\n      const inner = data['Countries'].map((country:any) => country.Country);\n      setSuggestions(inner)\n      setCountries(inner);\n\n    }\n  }, [data])\n\n  const getSuggestions = (value: string) => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    return inputLength === 0 ? [] : countries.filter((lang: any) =>\n      lang.toLowerCase().slice(0, inputLength) === inputValue\n    );\n  };\n\n  const onSuggestionsFetchRequested = ({ value, reason }: SuggestionsFetchRequestedParams) => {\n    setSuggestions(getSuggestions(value));\n  }\n\n  const onSuggestionsClearRequested: OnSuggestionsClearRequested = () => setSuggestions([]);\n\n\n  const getSuggestionValue: GetSuggestionValue<string> = (suggestion) => suggestion;\n\n\n  const renderSuggestion: RenderSuggestion<string> = (suggestion) => (\n    <div>\n      {suggestion}\n    </div>\n  );\n\n  const onChange = (event: React.FormEvent<any>, {newValue}: ChangeEvent) => {\n    event.preventDefault()\n    setInnerValue(newValue);\n    if (newValue === '') {\n      dispatch(newValue)\n    }\n  }\n\n  const onSuggestionSelected: OnSuggestionSelected<string> = (event, { suggestion, suggestionValue }) => {\n    dispatch(suggestionValue);\n    setInnerValue(suggestionValue);\n   \n  }\n  const inputProps = {\n    placeholder: 'Type a country',\n    value: innerValue,\n    onChange,\n  };\n  \n  return (\n      <Autosuggest    suggestions={suggestions}\n                      onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n                      getSuggestionValue={getSuggestionValue}\n                      renderSuggestion={renderSuggestion}\n                      onSuggestionSelected={onSuggestionSelected}\n                      onSuggestionsClearRequested={onSuggestionsClearRequested}\n                      renderInputComponent={renderInputComponent}\n                      renderSuggestionsContainer={renderSuggestionsContainer}\n                      inputProps={inputProps}\n      />\n  )\n}\n","import React, { useEffect } from 'react';\nimport {Search} from '../../../search/search';\nimport { UseFiltersColumnProps } from 'react-table';\nimport { useSearchState } from '../../../../context';\n\ninterface FilteredColumn {\n  column: UseFiltersColumnProps<any>\n}\nexport const DefaultColumnFilter = ({\n  column: { setFilter }\n}: FilteredColumn) => {\n\n  const state = useSearchState();\n  useEffect(() => {\n    setFilter(state);\n  }, [state]);\n\n  return (\n    <Search />\n    )\n}\n\n\n","import React from 'react';\nimport {useTable, useFilters, usePagination, Row, Cell } from 'react-table';\nimport { Pagination} from './utils/pagination';\nimport {DefaultColumnFilter} from './utils/filters';\nimport { SearchProvider } from '../../context';\n\nexport const Table = ({columns, data }: any) => {\n  const defaultColumn = React.useMemo(\n    () => ({\n      Header: '',\n      Filter: DefaultColumnFilter,\n    }),\n    []\n  )\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    footerGroups,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    nextPage,\n    previousPage,\n    state: { pageIndex, pageSize },\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n      initialState: { pageIndex: 0 , pageSize: 20},\n    },\n    useFilters,\n    usePagination,\n  )\n\n  const paginationProps = {\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    nextPage,\n    previousPage,\n    pageIndex, \n    pageSize,\n  };\n\n  return (\n    <SearchProvider>\n    <table className=\"table\" {...getTableProps()}>\n      <thead className=\"thead-light\">\n        {headerGroups.map(headerGroup => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n             <th scope=\"col\" {...column.getHeaderProps()}>\n             {column.render('Header')}\n             {/* Render the columns filter UI */}\n\n    \n             <div>{column.canFilter && column.Header === 'Country' ? column.render('Filter') : null}</div>\n           </th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n          {page.map((row: Row<object>, i: number) => {\n                prepareRow(row)\n                return (\n                  <tr {...row.getRowProps()}>\n                    {row.cells.map((cell: Cell) => {\n                      return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                    })}\n                  </tr>\n                )\n          })}\n      </tbody>\n\n       <tfoot>\n        {footerGroups.map(group => (\n          <tr {...group.getFooterGroupProps()}>\n            {group.headers.map(column => (\n              <td {...column.getFooterProps()}>{column.render('Footer')}</td>\n            ))}\n          </tr>\n        ))}\n      </tfoot>\n    </table>\n\n      <Pagination {...paginationProps} />\n    </SearchProvider>\n  )\n}\n","import React, { FunctionComponent, ReactNode, Fragment, PropsWithChildren } from 'react';\nimport { Column} from 'react-table';\nimport {Table} from './table';\n\ninterface TableContainerProps<D extends object>  {\n  columns:  Array<Column<D>>;\n  data: D[];\n  header?: ReactNode;\n}\n\nexport const TableContainer: FunctionComponent<TableContainerProps<any>> = (props: TableContainerProps<any>) => {\n  const {header, ...tableProps} = props;\n  return (\n    <Fragment>\n      <Table {...tableProps}/>\n    </Fragment>\n  )\n}","import React, { Fragment } from 'react';\nimport { ButtonToNavigate } from '../../components/shared';\nimport { TableContainer } from '../../components/table';\nimport {useCasesState} from \"../../context\";\nimport {columns} from './index';\n\nexport const CovidCasesTable = () => {\n  const {data, isError, isLoading}  = useCasesState();\n\n  const memoColumns = React.useMemo(() => columns, []);\n\n  const rows =  React.useMemo(() => {\n    if (data) {\n      return data['Countries']\n    }\n  }, [data]);\n\n  return (\n  <Fragment>\n    <ButtonToNavigate path=\"/chart\" title=\"View Chart\" />\n    {rows && rows.length > 0 && <TableContainer columns={memoColumns} data={rows} />}\n  </Fragment>\n  )\n\n}","import React from 'react';\nimport { TableInstance } from 'react-table';\nimport {getTotalCount} from \"./index\";\n\nexport const columns = [\n  {\n    Header: 'Country',\n    accessor: 'Country',\n  },\n  {\n    Header: 'Deaths',\n    accessor: 'NewDeaths',\n    Footer: (info: TableInstance) => {\n      const total = React.useMemo(() => getTotalCount(info, 'NewDeaths'), [info.filteredRows])\n      return <>Total: <div>{total}</div></>\n    },\n  },\n  {\n    Header: 'Recovered',\n    accessor: 'NewRecovered',\n    Footer: (info: TableInstance) => {\n      const total = React.useMemo(() => getTotalCount(info, 'NewRecovered'), [info.filteredRows])\n      return <>Total: <div>{total}</div></>\n    }\n\n  }, {\n    Header: 'New Cases',\n    accessor: 'NewConfirmed',\n    Footer: (info: TableInstance) => {\n      const total = React.useMemo(() => getTotalCount(info, 'NewConfirmed'), [info.filteredRows])\n      return <>Total: <div>{total}</div></>\n    }\n  }\n];","import React, { FunctionComponent } from 'react';\nimport {Bar, LinearComponentProps} from 'react-chartjs-2';\n\nexport const Chart: FunctionComponent<LinearComponentProps> = ({data}: LinearComponentProps) => {\n\n  return (\n      <Bar\n        data={data}\n        width={1000}\n        height={1000}\n        options={{ maintainAspectRatio: false, responsive: true }}\n    />\n )\n}","import React, {useEffect, Fragment} from 'react';\nimport {datasets} from './index';\nimport {CountryData} from \"../index\";\nimport {useCasesState} from \"../../context\";\nimport {Chart} from '../../components/chart';\nimport {ButtonToNavigate} from \"../../components/shared/button-to-navigate\";\n\nexport const CovidCasesChart = () => {\n  const {data, isError, isLoading}  = useCasesState();\n\n  useEffect(() => {\n    if (data && data['Countries'] && data['Countries'].length > 0) {\n      const countries = data['Countries'].map((country: CountryData) => country.Country);\n\n      datasets.labels = countries;\n\n      const covidCases = data['Countries'];\n      covidCases.forEach((covidCase: CountryData) => {\n        //  @ts-ignore\n        datasets.datasets[0].data.push(covidCase['NewConfirmed']);\n              //  @ts-ignore\n  \n        datasets.datasets[1].data.push(covidCase['NewDeaths']);\n              //  @ts-ignore\n  \n        datasets.datasets[2].data.push(covidCase['NewRecovered']);\n      });\n    }\n  }, [data])\n\n\n  console.log('datasets', datasets);\n\n  return (<Fragment>\n            <ButtonToNavigate title=\"View Table\" path=\"/\" />\n            <Chart data={datasets}/>\n\n  </Fragment>)\n}","export const datasets = {\n  labels: [],\n  datasets: [\n    {\n      label: 'New Cases',\n      data: [],\n      backgroundColor: '#FFFF00',\n      width: 5,\n    },\n    {\n      label: 'New Deaths',\n      data: [],\n      backgroundColor: '#FF0000',\n      width: 5,\n    },\n    {\n      label: 'New Recovered',\n      data: [],\n      backgroundColor: '#74B649',\n      width: 5,\n    },\n  ]\n};"],"sourceRoot":""}