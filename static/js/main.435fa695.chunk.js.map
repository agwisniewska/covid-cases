{"version":3,"sources":["context/search-context.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/search/search.tsx","components/index.ts","components/chart/index.ts","components/chart/chart.tsx","context/types.ts","services/urls.tsx","context/cases-context.tsx","context/mode-context.tsx","components/search/index.ts","components/table-chart-container.tsx","components/table/utils/pagination/types.ts","components/table/utils/pagination/button.tsx","components/table/utils/pagination/pagination.tsx","components/table/table.tsx","components/table/utils/filters/default-column-filter.tsx","features/covid-cases/utils.ts","features/covid-cases/covid-cases.tsx","features/covid-cases/columns.tsx","features/covid-cases/datasets.ts","components/shared/mode-button/types.ts","components/shared/mode-button/mode-button.tsx","features/index.ts"],"names":["SearchStateContext","createContext","undefined","SearchDispatchContext","SearchProvider","children","useState","searchPhrase","setSearchPhrase","Provider","value","useSearchState","context","useContext","Error","useSearchDispatch","React","App","Container","Row","Col","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","console","log","renderInputComponent","inputProps","className","onChange","event","newValue","target","method","type","aria-label","aria-describedby","renderSuggestionsContainer","containerProps","query","Search","data","useCasesState","dispatch","search","countries","setCountries","suggestions","setSuggestions","innerValue","setInnerValue","useEffect","map","covidCase","Country","placeholder","preventDefault","onSuggestionsFetchRequested","reason","inputValue","trim","toLowerCase","inputLength","length","filter","lang","slice","getSuggestions","getSuggestionValue","suggestion","renderSuggestion","onSuggestionSelected","suggestionValue","onSuggestionsClearRequested","Chart","width","height","options","maintainAspectRatio","responsive","STATUS","URLS","SUMMARY","dataFetchReducer","state","action","INIT","isLoading","isError","SUCCESS","payload","Countries","filteredData","FAILURE","assertUnreachable","CasesStateContext","CasesDispatchContext","CasesProvider","useReducer","a","axios","get","headers","result","fetchData","ModeStateContext","ModeDispatchContext","ModeProvider","MODE","TABLE","mode","setMode","CHART","useModeState","useModeDispatch","TableChartContainer","columns","chart","defaultColumn","useMemo","Header","Filter","DefaultColumnFilter","useTable","initialState","pageIndex","pageSize","useFilters","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","footerGroups","page","canPreviousPage","canNextPage","pageOptions","nextPage","previousPage","originals","record","original","labels","forEach","datasets","push","paginationProps","onClick","title","DIRECTION","PaginationButton","disabled","direction","Button","variant","LEFT","Pagination","props","RIGHT","Table","rest","striped","bordered","hover","headerGroup","getHeaderGroupProps","column","scope","getHeaderProps","canFilter","row","i","getRowProps","cells","cell","getCellProps","group","getFooterGroupProps","getFooterProps","setFilter","getTotalCount","info","key","rows","reduce","sum","values","CovidCases","memoColumns","memoData","accessor","Footer","total","filteredRows","label","backgroundColor","scales","xAxes","ticks","beginAtZero","ModeButton"],"mappings":"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","file":"static/js/main.435fa695.chunk.js","sourcesContent":["import React, {createContext, useState, useContext} from 'react';\n\ntype SearchDispatch = (searchPhrase: string) => void\ntype SearchProviderProps = {children: React.ReactNode}\n\nconst SearchStateContext = createContext<string | undefined>(undefined);\nconst SearchDispatchContext = createContext<SearchDispatch | undefined>(undefined);\n\nconst SearchProvider = ({children}: SearchProviderProps) => {\n\n  const [searchPhrase, setSearchPhrase] = useState('');\n\n  return (\n    <SearchStateContext.Provider value={searchPhrase}>\n      <SearchDispatchContext.Provider value={setSearchPhrase}>\n        {children}\n      </SearchDispatchContext.Provider>\n    </SearchStateContext.Provider>\n  )\n}\n\nconst useSearchState = () => {\n  const context = useContext(SearchStateContext)\n  if (context == null) {\n    throw new Error('useSearchState must be used within a SearchProvider')\n  }\n  return context\n}\n\nconst useSearchDispatch = () => {\n  const context = React.useContext(SearchDispatchContext)\n  if (context == null) {\n    throw new Error('useSearchDispatch must be used within a SearchProvider')\n  }\n  return context\n}\n\n\nexport {useSearchState, useSearchDispatch, SearchProvider}","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport {CovidCases} from \"./features\";\n\nimport { CasesProvider, ModeProvider, SearchProvider } from './context';\n\nexport const App = () =>  {\n  return (\n      <Container>\n          <Row>\n            <Col>\n              <CasesProvider>\n                <SearchProvider>\n                  <ModeProvider>\n                  < CovidCases/>\n                  </ModeProvider>\n                </SearchProvider>\n              </CasesProvider>\n            </Col>\n         </Row>\n      </Container>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport {App} from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n","import React, {FunctionComponent, useEffect, useState} from 'react';\nimport {useCasesState} from \"../../context\";\nimport Autosuggest, { SuggestionsFetchRequestedParams, OnSuggestionSelected , RenderSuggestion, GetSuggestionValue, OnSuggestionsClearRequested, RenderInputComponent, InputProps, ChangeEvent, RenderSuggestionsContainer, RenderSuggestionsContainerParams } from 'react-autosuggest';\nimport {useSearchDispatch, useSearchState} from '../../context/search-context';\nimport {CovidCase} from '../../features';\nimport \"./search.scss\";\n\nconst renderInputComponent: RenderInputComponent<string> = (inputProps: InputProps<string>) => {\n  //  TODO: Verify how to change it (is it possible to do it easily?) (the problem here that onChange type in inputProps is different than onChange in standard HTMLInput)\n  const onChangeHandler = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    inputProps.onChange(event, { newValue: event.target.value, method: 'type' });\n  };\n\n  return (\n  <div className=\"input-group\">\n    <input {...inputProps} onChange={onChangeHandler} type=\"text\" className=\"form-control\" aria-label=\"Country\" aria-describedby=\"inputGroup-sizing-default\"/>\n  </div>\n  )\n};\n\nconst renderSuggestionsContainer: RenderSuggestionsContainer = ({ containerProps, children, query }: RenderSuggestionsContainerParams) => {\n  if (!children) {\n    return null;\n  }\n  return (<ul {...containerProps} className=\"list-group\" >\n         <li className=\"list-group-item\" > {children} </li>\n    </ul>);\n}\n\nexport const Search: FunctionComponent = () => {\n  const {data} = useCasesState();\n  \n  const dispatch = useSearchDispatch();\n  const search = useSearchState();\n\n  const [countries, setCountries] = useState<string[]>([]);\n  const [suggestions, setSuggestions] = useState<string[]>([]);\n  \n  const [innerValue, setInnerValue] = useState('');\n\n  useEffect(() => {\n    const countries = data?.map((covidCase: CovidCase) => covidCase.Country);\n    setCountries(countries);\n}, [data])\n\n  useEffect(() => {\n    setInnerValue(search);\n  }, [search])\n\n  const getSuggestions = (value: string) => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    return inputLength === 0 ? [] : countries.filter((lang: any) =>\n      lang.toLowerCase().slice(0, inputLength) === inputValue\n    );\n  };\n\n  const onSuggestionsFetchRequested = ({ value, reason }: SuggestionsFetchRequestedParams) => {\n    setSuggestions(getSuggestions(value));\n  }\n\n  const onSuggestionsClearRequested: OnSuggestionsClearRequested = () => setSuggestions([]);\n\n  const getSuggestionValue: GetSuggestionValue<string> = (suggestion: string) => suggestion;\n\n  const renderSuggestion: RenderSuggestion<string> = (suggestion: string) => (\n    <div>\n      {suggestion}\n    </div>\n  );\n\n  const onChange = (event: React.FormEvent<any>, {newValue}: ChangeEvent) => {\n    event.preventDefault()\n    setInnerValue(newValue);\n    if (newValue === '') {\n      dispatch(newValue)\n    }\n  }\n\n  const onSuggestionSelected: OnSuggestionSelected<string> = (event, { suggestion, suggestionValue }) => {\n    dispatch(suggestionValue);\n    setInnerValue(suggestionValue);\n  }\n\n  const inputProps = {\n    placeholder: 'Type a country',\n    value: innerValue,\n    onChange,\n  };\n\n  //  TODO: Added styles to autosuggestions\n  return (\n      <Autosuggest    suggestions={suggestions}\n                      onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n                      getSuggestionValue={getSuggestionValue}\n                      renderSuggestion={renderSuggestion}\n                      onSuggestionSelected={onSuggestionSelected}\n                      onSuggestionsClearRequested={onSuggestionsClearRequested}\n                      renderInputComponent={renderInputComponent}\n                      renderSuggestionsContainer={renderSuggestionsContainer}\n                      inputProps={inputProps}\n      />\n  )\n}","export * from './chart';\nexport * from './search';\nexport * from './shared';\nexport * from './table';\nexport * from './table-chart-container';","export * from \"./chart\";\nexport * from './types';","import React, { FunctionComponent } from 'react';\nimport {Bar, LinearComponentProps} from 'react-chartjs-2';\n\nexport const Chart: FunctionComponent<any> = ({data}: LinearComponentProps) => (\n      <Bar\n        data={data}\n        width={1000}\n        height={1000}\n        options={{ maintainAspectRatio: false, responsive: true }}\n    />\n);","import { CovidCase } from '../features';\n\nexport enum STATUS {\n  INIT = 'INIT',\n  SUCCESS = 'SUCCESS',\n  FAILURE = 'FAILURE'\n}\n\nexport type Action =\n | { type: STATUS.INIT }\n | { type: STATUS.SUCCESS, payload: CovidPayloadData }\n | { type: STATUS.FAILURE, isError: string };\nexport type Dispatch = (action: Action) => void;\nexport type CasesProviderProps = {children: React.ReactNode};\n\n\nexport interface CovidPayloadData {\n  Countries: CovidCase[],\n}\n\nexport interface State {\n  isLoading: boolean;\n  isError: boolean;\n  data: CovidCase[];\n  filteredData: CovidCase[];\n}\n\n","const BASE_URL = 'https://api.covid19api.com';\n\nexport const URLS = {\n  SUMMARY: `${BASE_URL}/summary`\n}","import React, {createContext, useContext, useReducer, useEffect} from 'react';\nimport axios from 'axios';\nimport {Action, STATUS} from '.';\nimport {URLS} from '../services';\nimport {State, Dispatch, CasesProviderProps} from '.';\n\nconst assertUnreachable = (): never => {\n  throw new Error();\n}\n\nconst dataFetchReducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case STATUS.INIT:\n      return {\n        ...state,\n        isLoading: true,\n        isError: false\n      };\n    case STATUS.SUCCESS:\n      return {\n        ...state,\n        isLoading: false,\n        isError: false,\n        data: action?.payload?.Countries,\n        filteredData: action?.payload?.Countries,\n      };\n    case STATUS.FAILURE:\n      return {\n        ...state,\n        isLoading: false,\n        isError: true,\n      };\n    }\n  assertUnreachable();\n};\n\nconst CasesStateContext = createContext<State | undefined>(undefined);\nconst CasesDispatchContext = createContext<Dispatch | undefined>(undefined);\n\nconst CasesProvider = ({children}: CasesProviderProps) => {\n  //  @ts-ignore\n  const [state, dispatch] = useReducer(dataFetchReducer, {\n    isLoading: false,\n    isError: false,\n    data: [],\n    filteredData: []\n  });\n\n  useEffect(() => {\n    let didCancel = false;\n\n    const fetchData = async () => {\n        //  @ts-ignore\n\n      dispatch({ type: STATUS.INIT });\n\n      try {\n\n        const result = await axios.get(URLS.SUMMARY, {\n          headers: {\n            'Authorization': 'X-Access-Token5cf9dfd5-3449-485e-b5ae-70a60e997864'\n           }\n          }\n        );\n\n        if (!didCancel) {\n            //  @ts-ignore\n\n          dispatch({ type: STATUS.SUCCESS, payload: result.data });\n        }\n\n      } catch (error) {\n        if (!didCancel) {\n            //  @ts-ignore\n\n          dispatch({ type: STATUS.FAILURE });\n\n        }\n      }\n    };\n \n    fetchData();\n\n  }, []);\n\n\n  return (\n    <CasesStateContext.Provider value={state}>\n      <CasesDispatchContext.Provider value={dispatch}>\n        {children}\n      </CasesDispatchContext.Provider>\n    </CasesStateContext.Provider>\n  )\n}\n\nconst useCasesState = () => {\n  const context = useContext(CasesStateContext)\n  if (context == null) {\n    throw new Error('useCasesState must be used within a SearchProvider')\n  }\n  return context\n}\n\nconst useCasesDispatch = () => {\n  const context = useContext(CasesDispatchContext)\n  if (context == null) {\n    throw new Error('useCasesDispatch must be used within a SearchProvider')\n  }\n  return context\n}\n\n\nexport {useCasesDispatch, useCasesState, CasesProvider}","import React, {MouseEvent, createContext, useState, useContext} from 'react';\nimport {MODE} from '../components';\n\nexport type ModeDispatch = (event: MouseEvent<HTMLButtonElement>) => void\nexport type ModeProviderProps = {children: React.ReactNode}\n\nconst ModeStateContext = createContext<MODE | undefined>(undefined);\nconst ModeDispatchContext = createContext<ModeDispatch | undefined>(undefined);\n\nconst ModeProvider = ({children}: ModeProviderProps) => {\n\n  const [mode, setMode] = useState(MODE.TABLE);\n\n  const toggleMode = () => {\n    mode === MODE.TABLE ? setMode(MODE.CHART) : setMode(MODE.TABLE)\n  }\n\n  return (\n    <ModeStateContext.Provider value={mode}>\n      <ModeDispatchContext.Provider value={toggleMode}>\n        {children}\n      </ModeDispatchContext.Provider>\n    </ModeStateContext.Provider>\n  )\n}\n\nconst useModeState = () => {\n  const context = useContext(ModeStateContext)\n  if (context == null) {\n    throw new Error('useModeState must be used within a ModeProvider')\n  }\n  return context\n}\n\nconst useModeDispatch = () => {\n  const context = React.useContext(ModeDispatchContext)\n  if (context == null) {\n    throw new Error('useModeDispatch must be used within a ModeProvider')\n  }\n  return context\n}\n\n\nexport {useModeState, useModeDispatch, ModeProvider}","export * from './search';","import React, {FunctionComponent, useEffect, Fragment, ReactNode} from 'react';\nimport {Table, DefaultColumnFilter, MODE, ModeButton, ChartData, Chart } from '../components';\nimport {CovidCase} from '../features';\nimport {useModeState, useModeDispatch} from '../context';\nimport {useTable, usePagination, useFilters, TableInstance, Column} from 'react-table';\n\nexport type TableChartContainerProps = Pick<TableInstance,\n'data'\n> & {\n  columns: Array<Column<{}>>,\n  chart: ChartData,\n}\n\nexport const TableChartContainer: FunctionComponent<TableChartContainerProps> = ({columns, chart, data}: TableChartContainerProps) => {\n  const mode = useModeState();\n  const dispatch = useModeDispatch();\n  const defaultColumn = React.useMemo(() => ({\n    Header: '',\n    Filter: DefaultColumnFilter,\n  }),\n  []\n)\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    footerGroups,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    nextPage,\n    previousPage,\n    state: { pageIndex, pageSize },\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n      initialState: { pageIndex: 0 , pageSize: 20},\n    },\n    useFilters,\n    usePagination,\n  )\n\n  useEffect(() => {\n    const originals: CovidCase[] = page?.map(record => record.original as CovidCase);\n    chart.labels = originals?.map(((covidCase: CovidCase) => covidCase.Country));\n\n    originals?.forEach((covidCase: CovidCase) => {\n      chart?.datasets![0].data!.push(covidCase['NewConfirmed']);\n      chart?.datasets![1].data!.push(covidCase['NewDeaths']);\n      chart?.datasets![2].data!.push(covidCase['NewRecovered']);\n  })\n  }, [page]);\n\n  const paginationProps = {\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    nextPage,\n    previousPage,\n    pageIndex,\n    pageSize,\n    page\n  };\n\n  return (\n    <Fragment>\n      <ModeButton onClick={dispatch} title={mode === MODE.TABLE ? 'Chart view' : 'Table view'}/>\n       {(mode === MODE.CHART) && page && <Chart data={chart}/>}\n       {( mode === MODE.TABLE )  && (data?.length > 0) &&  (\n       <Table getTableProps={getTableProps}\n              getTableBodyProps={getTableBodyProps}\n              headerGroups={headerGroups}\n              prepareRow={prepareRow}\n              footerGroups={footerGroups}\n              {...paginationProps}/>\n            )}\n    </Fragment>\n  )\n}\n","import {UsePaginationInstanceProps, UsePaginationState} from 'react-table';\n\nexport interface PaginationButtonProps {\n  disabled: boolean;\n  direction?: string;\n  onClick: () => void;\n}\n\nexport type PaginationProps = Pick<UsePaginationInstanceProps<{}>,\n'previousPage' |\n'nextPage' |\n'pageOptions' |\n'canPreviousPage' |\n'canNextPage' |\n'page'\n> & Pick<UsePaginationState<{}>,\n'pageIndex'\n> \n\nexport enum DIRECTION {\n  LEFT = 'LEFT',\n  RIGHT = 'RIGHT',\n}","import React, {Fragment, FunctionComponent} from 'react';\nimport {PaginationButtonProps} from '../pagination';\nimport { DIRECTION } from './types';\nimport Button from 'react-bootstrap/Button';\n\nexport const PaginationButton: FunctionComponent<PaginationButtonProps> = ({disabled, direction, onClick, children}) => {\n  return (\n  <Button variant=\"link\" disabled={disabled} onClick={onClick}>\n      {!children && direction ===  DIRECTION.LEFT ? '<' : '>'}\n      {children && <Fragment>{children}</Fragment>}\n  </Button>\n  )\n}","import React, { FunctionComponent } from 'react';\nimport {PaginationProps} from '../pagination';\nimport { PaginationButton } from './button';\nimport { DIRECTION } from './types';\n\nexport const Pagination: FunctionComponent<Omit<PaginationProps, 'page'>> = (props: Omit<PaginationProps, 'page'>) => {\n  const {previousPage, pageOptions, canPreviousPage, canNextPage, pageIndex, nextPage} = props;\n  return (\n    <div className=\"d-flex align-items-center justify-content-end\">\n      \n      <PaginationButton onClick={previousPage} disabled={!canPreviousPage} direction={DIRECTION.LEFT}/>\n      <span>\n         Page\n         <strong>\n         {' '} {pageIndex + 1} of {pageOptions.length}\n         </strong>\n       </span>\n      <PaginationButton onClick={nextPage} disabled={!canNextPage} direction={DIRECTION.RIGHT} />\n       \n    </div>\n  )\n}","import React, { Fragment, FunctionComponent } from 'react';\nimport { Pagination, PaginationProps} from './utils/pagination';\nimport {default as LayoutTable} from 'react-bootstrap/Table'\nimport {UseTableInstanceProps} from 'react-table';\n\ntype TableProps = Pick<UseTableInstanceProps<{}>, \n'headerGroups' |\n'prepareRow' |\n'footerGroups' |\n'getTableProps' |\n'getTableBodyProps'\n> & PaginationProps\n\nexport const Table: FunctionComponent<TableProps> = ({\n    getTableProps,\n    getTableBodyProps,\n    headerGroups, \n    prepareRow,\n    footerGroups,\n    page,\n    ...rest\n  }: TableProps) => {\n  \n  return (\n    <Fragment>\n      <LayoutTable striped bordered hover {...getTableProps()}>\n         {/* TODO: Moved this to Header.tsx file */}\n        <thead className=\"thead-light\">\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n              <th scope=\"col\" {...column.getHeaderProps()}>\n              {column.render('Header')}\n                {column.canFilter && column.Header === 'Country'  && <div> {column.render('Filter')}</div>}\n            </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n            {page.map((row, i) => {\n                  prepareRow(row)\n                  return (\n                    <tr {...row.getRowProps()}>\n                      {row.cells.map((cell) => {\n                        return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                      })}\n                    </tr>\n                  )\n            })}\n        </tbody>\n        <tfoot>\n          {/* TODO: Moved this to Footer.tsx file */}\n\n          {footerGroups.map(group => ( \n            <tr {...group.getFooterGroupProps()}>\n              {group.headers.map(column => (\n                <td {...column.getFooterProps()}>{column.render('Footer')}</td>\n              ))}\n            </tr>\n          ))}\n        </tfoot>\n      </LayoutTable>\n      <Pagination {...rest} />\n    </Fragment>\n  )\n}\n","import React, { useEffect } from 'react';\nimport {Search} from '../../../search/search';\nimport { UseFiltersColumnProps } from 'react-table';\nimport { useSearchState } from '../../../../context';\n\ninterface FilteredColumn {\n  column: UseFiltersColumnProps<any>\n}\nexport const DefaultColumnFilter = ({\n  column: { setFilter }\n}: FilteredColumn) => {\n\n  const state = useSearchState();\n  \n  useEffect(() => {\n    setFilter(state);\n  }, [state]);\n\n  return (\n    <Search />\n    )\n}\n\n\n","import {TableInstance} from 'react-table';\n\nexport const getTotalCount = (info: TableInstance, key: string): number => {\n  return info.rows.reduce((sum, row) => row.values[key] + sum, 0);\n}","import React, { Fragment , FunctionComponent } from 'react';\nimport {useCasesState} from \"../../context\";\nimport {columns, datasets} from '../covid-cases';\nimport {TableChartContainer} from '../../components';\n\nexport const CovidCases: FunctionComponent = () => {\n  const {data, isError, isLoading}  = useCasesState();\n  const memoColumns = React.useMemo(() => columns, []);\n  const memoData =  React.useMemo(() => data, [data]);\n\n  return (\n    <Fragment>\n      {isLoading && <div>Loading... </div>}\n      {isError && <div> An error occured. Please try again later</div>}\n      <TableChartContainer columns={memoColumns} chart={datasets} data={memoData} />\n    </Fragment>\n\n  )\n}","import React from 'react';\nimport { TableInstance } from 'react-table';\nimport { TableChartContainerProps } from '../../components';\nimport {getTotalCount} from \"./index\";\n\nexport const columns = [\n  {\n    Header: 'Country',\n    accessor: 'Country',\n  },\n  {\n    Header: 'Deaths',\n    accessor: 'NewDeaths',\n    Footer: (info: TableInstance) => {\n      const total = React.useMemo(() => getTotalCount(info, 'NewDeaths'), [info.filteredRows])\n      return <><b>Total:</b> <div>{total}</div></>\n    },\n  },\n  {\n    Header: 'Recovered',\n    accessor: 'NewRecovered',\n    Footer: (info: TableInstance) => {\n      const total = React.useMemo(() => getTotalCount(info, 'NewRecovered'), [info.filteredRows])\n      return <><b>Total:</b> <div>{total}</div></>\n    }\n\n  }, {\n    Header: 'New Cases',\n    accessor: 'NewConfirmed',\n    Footer: (info: TableInstance) => {\n      const total = React.useMemo(() => getTotalCount(info, 'NewConfirmed'), [info.filteredRows])\n      return <><b>Total:</b> <div>{total}</div></>\n    }\n  }\n];","import {ChartData} from '../../components';\n\nexport const datasets: ChartData = {\n  labels: [],\n  datasets: [\n    {\n      label: 'New Cases',\n      data: [],\n      backgroundColor: '#FFFF00',\n    },\n    {\n      label: 'New Deaths',\n      data: [],\n      backgroundColor: '#FF0000',\n    },\n    {\n      label: 'New Recovered',\n      data: [],\n      backgroundColor: '#74B649',\n    },\n  ],\n  options: {\n    responsive: true,\n    scales: {\n      xAxes: [{\n        ticks: {\n          beginAtZero: true\n        }\n      }]\n    }\n  }\n};","import {MouseEvent} from \"react\";\n\nexport enum MODE {\n  TABLE = 'TABLE',\n  CHART = 'CHART'\n}\n\nexport interface ModeButtonProps {\n  title: string;\n  onClick: (event: MouseEvent<HTMLButtonElement>) => void;\n}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button'\nimport {ModeButtonProps} from \".\";\n\nexport const ModeButton = ({ title, onClick }: ModeButtonProps) => {\n  return (\n    <Button\n      variant=\"info\"\n      type=\"button\"\n      className=\"btn btn-info\"\n      onClick={onClick}>\n      {title}\n    </Button>\n  );\n}\n","export * from \"./types\";\nexport * from './covid-cases';"],"sourceRoot":""}