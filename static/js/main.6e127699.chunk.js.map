{"version":3,"sources":["hooks/useApi.ts","context/SearchContext.tsx","components/search/Search.tsx","components/table/utils/filters/DefaultColumnFilter.tsx","components/table/Table.tsx","components/table/TableContainer.tsx","components/chart/Chart.tsx","components/chart/ChartContainer.tsx","components/Main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["STATUS","SearchStateContext","createContext","undefined","SearchDispatchContext","SearchProvider","children","useState","searchPhrase","setSearchPhrase","Provider","value","useSearchState","context","useContext","Error","dataFetchReducer","state","action","type","INIT","isLoading","isError","SUCCESS","data","payload","FAILURE","useDataApi","initialApi","initialData","url","setUrl","useReducer","dispatch","useEffect","a","axios","get","headers","result","fetchData","renderInputComponent","inputProps","className","onChange","event","newValue","target","method","aria-label","aria-describedby","renderSuggestionsContainer","containerProps","query","Search","covidSummaryUrl","countries","setCountries","suggestions","setSuggestions","innerValue","setInnerValue","React","useSearchDispatch","inner","map","country","Country","placeholder","preventDefault","onSuggestionsFetchRequested","reason","inputValue","trim","toLowerCase","inputLength","length","filter","lang","slice","getSuggestions","getSuggestionValue","suggestion","renderSuggestion","onSuggestionSelected","suggestionValue","onSuggestionsClearRequested","DefaultColumnFilter","setFilter","column","Table","columns","defaultColumn","useMemo","Header","Filter","useTable","initialState","pageIndex","pageSize","useFilters","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","footerGroups","page","canPreviousPage","canNextPage","pageOptions","nextPage","previousPage","headerGroup","getHeaderGroupProps","scope","getHeaderProps","render","canFilter","row","i","getRowProps","cells","cell","getCellProps","group","getFooterGroupProps","getFooterProps","onClick","disabled","ButtonToNavigate","title","path","history","useHistory","push","getTotalCount","info","key","rows","reduce","sum","values","columnsConfig","accessor","Footer","total","TableContainer","Chart","dataSets","width","height","options","maintainAspectRatio","responsive","datasets","labels","label","backgroundColor","ChartContainer","forEach","covidCase","console","log","Main","exact","component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e127699.chunk.js","sourcesContent":["import {useState, useReducer, useEffect} from \"react\";\nimport axios from 'axios';\n\nenum STATUS {\n  INIT = 'INIT',\n  SUCCESS = 'SUCCESS',\n  FAILURE = 'FAILURE'\n}\n\n//  TODO: Verify that interface\ninterface Action {\n  type: STATUS;\n  payload?: object;\n}\n\n//  TODO: Change any to types!\nconst dataFetchReducer = (state: any, action: Action) => {\n  switch (action.type) {\n    case STATUS.INIT:\n      return {\n        ...state,\n        isLoading: true,\n        isError: false\n      };\n    case STATUS.SUCCESS:\n      return {\n        ...state,\n        isLoading: false,\n        isError: false,\n        data: action.payload,\n      };\n    case STATUS.FAILURE:\n      return {\n        ...state,\n        isLoading: false,\n        isError: true,\n      };\n    default:\n\n    //  add typescript never function !\n      throw new Error();\n  }\n};\n\nexport const useDataApi = (initialApi: string, initialData: unknown) => {\n  const [url, setUrl] = useState(initialApi);\n\n  const [state, dispatch] = useReducer(dataFetchReducer, {\n    isLoading: false,\n    isError: false,\n    data: initialData,\n  });\n\n  useEffect(() => {\n    let didCancel = false;\n\n    const fetchData = async () => {\n      dispatch({ type: STATUS.INIT });\n\n      try {\n\n        const result = await axios.get(url, {\n          headers: {\n            'Authorization': 'X-Access-Token5cf9dfd5-3449-485e-b5ae-70a60e997864'\n           }\n          }\n        );\n\n        if (!didCancel) {\n          dispatch({ type: STATUS.SUCCESS, payload: result.data });\n        }\n\n      } catch (error) {\n        if (!didCancel) {\n          dispatch({ type: STATUS.FAILURE });\n\n        }\n      }\n    };\n \n    fetchData();\n\n  }, [url]);\n \n  return [state, setUrl];\n}","import React, {createContext, useState, useContext} from 'react';\n\ntype Dispatch = (searchPhrase: string) => void\ntype SearchProviderProps = {children: React.ReactNode}\n\nconst SearchStateContext = createContext<string | undefined>(undefined);\nconst SearchDispatchContext = createContext<Dispatch | undefined>(undefined);\n\nconst SearchProvider = ({children}: SearchProviderProps) => {\n\n  const [searchPhrase, setSearchPhrase] = useState('');\n\n  return (\n    <SearchStateContext.Provider value={searchPhrase}>\n      <SearchDispatchContext.Provider value={setSearchPhrase}>\n        {children}\n      </SearchDispatchContext.Provider>\n    </SearchStateContext.Provider>\n  )\n}\n\nconst useSearchState = () => {\n  const context = useContext(SearchStateContext)\n  if (context == null) {\n    throw new Error('useSearchState must be used within a SearchProvider')\n  }\n  return context\n}\n\nconst useSearchDispatch = () => {\n  const context = React.useContext(SearchDispatchContext)\n  if (context == null) {\n    throw new Error('useSearchDispatch must be used within a SearchProvider')\n  }\n  return context\n}\n\n\nexport {useSearchState, useSearchDispatch, SearchProvider}","import React, {FunctionComponent, useEffect, useState} from 'react';\nimport {useDataApi} from \"../../hooks/useApi\";\nimport Autosuggest, { SuggestionsFetchRequestedParams, OnSuggestionSelected , RenderSuggestion, GetSuggestionValue, OnSuggestionsClearRequested, RenderInputComponent, InputProps, ChangeEvent, RenderSuggestionsContainer, RenderSuggestionsContainerParams } from 'react-autosuggest';\nimport {useSearchDispatch} from '../../context/SearchContext';\nimport {covidSummaryUrl} from '../table';\n\n//  TODO: Move it to separated file\n\nexport interface Country {\n  Country: string;\n  Slug: string;\n  ISO2: string;\n}\n\nconst renderInputComponent: RenderInputComponent<string> = (inputProps: InputProps<string>) => {\n  //  TODO: Verify how to change it easily (the problem here that onChange type in inputProps is different than onChange in standard HTMLInput)\n  const onChangeHandler = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    inputProps.onChange(event, { newValue: event.target.value, method: 'type' });\n  };\n\n  return (\n  <div className=\"input-group mb-3\">\n    <input {...inputProps} onChange={onChangeHandler} type=\"text\" className=\"form-control\" aria-label=\"Country\" aria-describedby=\"inputGroup-sizing-default\"/>\n  </div>\n  )\n};\n\nconst renderSuggestionsContainer: RenderSuggestionsContainer = ({ containerProps, children, query }: RenderSuggestionsContainerParams) => {\n  if (!children) {\n    return null;\n  }\n  return (<ul {...containerProps} className=\"list-group\" >\n         <li className=\"list-group-item\" > {children} </li>\n    </ul>);\n}\n\nexport const Search: FunctionComponent = () => {\n  const [{data}] = useDataApi(covidSummaryUrl, []);\n  const [countries, setCountries] = useState([]);\n  const [suggestions, setSuggestions] = useState([]);\n  const [innerValue, setInnerValue] = useState('');\n  const dispatch = useSearchDispatch();\n\n  useEffect(() => {\n    if (data && data['Countries']) {\n      const inner = data['Countries'].map((country:any) => country.Country);\n      setSuggestions(inner)\n      setCountries(inner);\n\n    }\n  }, [data])\n\n  const getSuggestions = (value: string) => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    return inputLength === 0 ? [] : countries.filter((lang: any) =>\n      lang.toLowerCase().slice(0, inputLength) === inputValue\n    );\n  };\n\n  const onSuggestionsFetchRequested = ({ value, reason }: SuggestionsFetchRequestedParams) => {\n    setSuggestions(getSuggestions(value));\n  }\n\n  const onSuggestionsClearRequested: OnSuggestionsClearRequested = () => setSuggestions([]);\n\n\n  const getSuggestionValue: GetSuggestionValue<string> = (suggestion) => suggestion;\n\n\n  const renderSuggestion: RenderSuggestion<string> = (suggestion) => (\n    <div>\n      {suggestion}\n    </div>\n  );\n\n  const onChange = (event: React.FormEvent<any>, {newValue}: ChangeEvent) => {\n    event.preventDefault()\n    setInnerValue(newValue);\n    if (newValue === '') {\n      dispatch(newValue)\n    }\n  }\n\n  const onSuggestionSelected: OnSuggestionSelected<string> = (event, { suggestion, suggestionValue }) => {\n    dispatch(suggestionValue);\n    setInnerValue(suggestionValue);\n   \n  }\n  const inputProps = {\n    placeholder: 'Type a country',\n    value: innerValue,\n    onChange,\n  };\n  \n  return (\n      <Autosuggest    suggestions={suggestions}\n                      onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n                      getSuggestionValue={getSuggestionValue}\n                      renderSuggestion={renderSuggestion}\n                      onSuggestionSelected={onSuggestionSelected}\n                      onSuggestionsClearRequested={onSuggestionsClearRequested}\n                      renderInputComponent={renderInputComponent}\n                      renderSuggestionsContainer={renderSuggestionsContainer}\n                      inputProps={inputProps}\n      />\n  )\n}\n","import React, { useEffect } from 'react';\nimport {Search} from '../../../search/Search';\nimport { UseFiltersColumnProps } from 'react-table';\nimport { useSearchState } from '../../../../context/SearchContext';\n\ninterface FilteredColumn {\n  column: UseFiltersColumnProps<any>\n}\nexport const DefaultColumnFilter = ({\n  column: { setFilter }\n}: FilteredColumn) => {\n\n  const state = useSearchState();\n  useEffect(() => {\n    setFilter(state);\n  }, [state]);\n\n  return (\n    <Search />\n    )\n}\n\n\n","import React, {Fragment } from 'react';\nimport {useTable, useFilters, usePagination, Row, Cell, UseTableOptions, UseFiltersColumnProps} from 'react-table';\nimport {useSearchState} from \"../../context/SearchContext\";\nimport {DefaultColumnFilter} from './utils/filters';\n\n\nexport const Table = ({columns, data }: UseTableOptions<any>) => {\n  const search = useSearchState();\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      Header: '',\n      Filter: DefaultColumnFilter,\n    }),\n    []\n  )\n\n  //  useTable\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    footerGroups,\n    //@ts-ignore\n    page,\n        //@ts-ignore\n\n    canPreviousPage,\n        //@ts-ignore\n\n    canNextPage,\n            //@ts-ignore\n\n    pageOptions,\n            //@ts-ignore\n\n    nextPage,\n            //@ts-ignore\n\n    previousPage,\n            //@ts-ignore\n\n    state: { pageIndex, pageSize },\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n      initialState: { pageIndex: 0 , pageSize: 20},\n\n\n    } as UseTableOptions<any>,\n    useFilters,\n    usePagination\n  )\n  \n  // Render the UI for your table\n  return (\n    <Fragment>\n    <table className=\"table\"\n    {...getTableProps()}>\n      <thead className=\"thead-light\">\n        {headerGroups.map(headerGroup => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n             <th scope=\"col\" {...column.getHeaderProps()}>\n             {column.render('Header')}\n             {/* Render the columns filter UI */}\n\n    \n             <div>{(column as unknown as UseFiltersColumnProps<any>).canFilter && column.Header === 'Country' ? column.render('Filter') : null}</div>\n           </th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n          {page.map((row: Row<object>, i: number) => {\n                prepareRow(row)\n                return (\n                  <tr {...row.getRowProps()}>\n                    {row.cells.map((cell: Cell) => {\n                      return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                    })}\n                  </tr>\n                )\n          })}\n      </tbody>\n\n       <tfoot>\n        {footerGroups.map(group => (\n          <tr {...group.getFooterGroupProps()}>\n            {group.headers.map(column => (\n              <td {...column.getFooterProps()}>{column.render('Footer')}</td>\n            ))}\n          </tr>\n        ))}\n      </tfoot>\n    </table>\n\n    <div className=\"pagination\">\n       \n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n          {'<'}\n        </button>{' '}\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\n          {'>'}\n        </button>{' '}\n        <span>\n          Page{' '}\n          <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{' '}\n        </span>\n       \n    </div>\n    </Fragment>\n  )\n}\n","import React, { FunctionComponent, Fragment } from 'react';\nimport {Table} from './Table';\nimport { useDataApi } from '../../hooks/useApi';\nimport { TableInstance } from 'react-table';\nimport {SearchProvider} from '../../context';\nimport {useHistory} from 'react-router-dom';\n\nexport const covidSummaryUrl = 'https://api.covid19api.com/summary';\n\ninterface ButtonToNavigate {\n  title: string;\n  path: string;\n}\n\n// TODO: Move to separated file \nexport const ButtonToNavigate = ({ title, path }: ButtonToNavigate) => {\n\n  const history = useHistory();\n\n  return (\n    <button\n      type=\"button\"\n      onClick={() => history.push(path)}>\n      {title}\n    </button>\n  );\n}\n\nconst getTotalCount = (info: TableInstance, key: string): number => {\n  return info.rows.reduce((sum, row) => row.values[key] + sum, 0);\n}\n\nconst columnsConfig = [\n  {\n    Header: 'Country',\n    accessor: 'Country',\n  },\n  {\n    Header: 'Deaths',\n    accessor: 'NewDeaths',\n    Footer: (info: TableInstance) => {\n      const total = React.useMemo(() => getTotalCount(info, 'NewDeaths'), [info.rows])\n      return <>Total: <div>{total}</div></>\n    },\n  },\n  {\n    Header: 'Recovered',\n    accessor: 'NewRecovered',\n    Footer: (info: TableInstance) => {\n      const total = React.useMemo(() => getTotalCount(info, 'NewRecovered'), [info.rows])\n      return <>Total: <div>{total}</div></>\n    }\n\n  }, {\n    Header: 'New Cases',\n    accessor: 'NewConfirmed',\n    Footer: (info: TableInstance) => {\n      const total = React.useMemo(() => getTotalCount(info, 'NewConfirmed'), [info.rows])\n      return <>Total: <div>{total}</div></>\n    }\n  }\n];\n\nexport const TableContainer: FunctionComponent = () => {\n\n\n\n  const[{data, isError, isLoading}] = useDataApi(covidSummaryUrl, null)\n \n  const columns = React.useMemo(() => columnsConfig, []);\n\n  const rows =  React.useMemo(() => {\n    if (data) {\n      return data['Countries']\n    }\n  }, [data]);\n\n\n  return (\n    <SearchProvider>\n      <ButtonToNavigate title=\"View Chart\" path=\"/chart\" />\n      {isLoading && <div> Loading ... </div>}\n      {isError &&  <div>An error occurred. Try to refresh the browser. </div> }\n      {rows && <Table columns={columns} data={rows}/>}\n    </SearchProvider> \n  )\n}","import React, { FunctionComponent } from 'react';\nimport {Bar, LinearComponentProps} from 'react-chartjs-2';\n// import { useDataApi } from '../../hooks';\n\n// TODO: Prepare util for data\n// import {covidSummaryUrl} from '../table/TableContainer';\n\nexport const Chart: FunctionComponent<LinearComponentProps> = ({data: dataSets}: LinearComponentProps) => {\n  // const [{data, isError, isLoading}] = useDataApi(covidSummaryUrl, [])\n \n  return (\n      <Bar\n        data={dataSets}\n        width={1000}\n        height={1000}\n        options={{ maintainAspectRatio: false, responsive: true }}\n    />\n )\n}","import React, { Fragment, useEffect } from 'react';\nimport { useDataApi } from '../../hooks';\nimport {Country} from \"../search\";\nimport {Chart} from \"./index\";\nimport { covidSummaryUrl } from '../table';\nimport {CountryData} from '../table/types';\nimport {ButtonToNavigate} from \"../table\";\n\nexport const datasets = {\n  labels: [],\n  datasets: [\n    {\n      label: 'New Cases',\n      data: [],\n      backgroundColor: '#FFFF00',\n      width: 5,\n    },\n    {\n      label: 'New Deaths',\n      data: [],\n      backgroundColor: '#FF0000',\n      width: 5,\n    },\n    {\n      label: 'New Recovered',\n      data: [],\n      backgroundColor: '#74B649',\n      width: 5,\n    },\n  ]\n}\n\n\nexport const ChartContainer = () => {\n  const [{data, isError, isLoading}] = useDataApi(covidSummaryUrl, []);\n\n\n  //TODO: Get data outside this container;\n\n  useEffect(() => {\n    if (data && data['Countries'] && data['Countries'].length > 0) {\n      const countries = data['Countries'].map((country: Country) => country.Country);\n\n      datasets.labels = countries;\n\n      const covidCases = data['Countries'];\n      covidCases.forEach((covidCase: CountryData) => {\n        //  @ts-ignore\n        datasets.datasets[0].data.push(covidCase['NewConfirmed']);\n              //  @ts-ignore\n  \n        datasets.datasets[1].data.push(covidCase['NewDeaths']);\n              //  @ts-ignore\n  \n        datasets.datasets[2].data.push(covidCase['NewRecovered']);\n      });\n    }\n  }, [data])\n\n\n  console.log('datasets', datasets);\n  return (\n    <Fragment>\n        <ButtonToNavigate title=\"View Table\" path=\"/\" />\n\n        {/*  TODO: Add global isError and isLoading maintenance */}\n        {isLoading && <> Loading </> }\n        {isError && (<> Something went wrong. Please refresh the browser </>)}\n        {data && data['Countries']  && <Chart data={datasets}/>}\n    </Fragment>\n  )\n}","import React from 'react';\nimport {TableContainer} from './table';\nimport { ChartContainer } from './chart';\nimport {Switch, Route} from \"react-router-dom\";\n\nexport const Main = () => {\n\n  return (\n    <Switch>\n      <Route exact path='/' component={TableContainer}/>\n      <Route path='/chart' component={ChartContainer}/>\n  </Switch>\n  )\n}\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport {Main} from \"./components/Main\";\n\nexport const App = () =>  {\n  return (\n    <BrowserRouter>\n      <div className=\"container\">\n        <Main /> \n      </div>\n    </BrowserRouter>\n\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App}from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}